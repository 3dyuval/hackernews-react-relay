 interface Node {
    id: ID!
  }

  interface Actor {
    id: ID!
    name: String
    profilePicture: Image
    joined: String
  }

  type User implements Node & Actor {
    id: ID!
    name: String
    email: String
    profilePicture: Image
    joined: String
  }

  type Image {
    url(height: Int, width: Int): String!
    altText: String
  }

  type LinkConnection {
    edges: [LinkEdge]
    pageInfo: PageInfo!
	  totalCount: Int!
  }

  type LinkEdge {
    cursor: String!
    node: Link
  }

  type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
  }

  type Link implements Node {
    id: ID!
    topic: String
    description: String!
    url: String!
    comments: CommentConnection
    createdAt: String!
    totalComments: Int!
    poster: User
  }

  type CommentConnection {
    edges: [CommentEdge]
    pageInfo: PageInfo
  }

  type CommentEdge {
    cursor: String!
    node: Comment
  }

  type Comment implements Node {
    id: ID!
    body: String!
    link: Link
  }

  type Topic {
    id: String!
    name: String!
  }

  type Query {
    viewer: Viewer
    node(id: ID!): Node 
    info: String!
    feed(cursor: String): LinkConnection!
    comment(id: ID!): Comment
    link(id: ID!): Link
    topic(id: String!): Topic
  }

  type Viewer {
    actor: Actor
  }

  type Mutation {
    postLink(url: String!, description: String!): Link!
    postCommentOnLink(linkId: ID!, body: String!): Comment!
    createTopic(id: String!, name: String!): Topic!
  }